#+STARTUP: showall
#+TITLE: 
#+AUTHOR: Jose Carlos Buenrostro Rueda

* ¿Qué es PYTHON?
  Python es un *lenguaje de programación* de proposito general orientado
  a objetos con caracteristicas de otros paradigmas de programación
  tales como imperativo y funcional.
** ¿Qué es un lenguaje de programación?
   Un lenguaje de programacion es un programa en el que se puede 
   abstraer todo aquello que sea susceptible de ser un algortimo y 
   para tal tarea los lenguajes de programación se componen
   esencialmente de dos conceptos; sintaxis, la cual especifica como 
   debe ser escrito un programa en el lenguaje (ojo: puede estar bien
   escrito un programa y aun asi no ejecutarse de una manera correcta)
   y semantica, que es lo que le da sentido a lo que escribimos en la
   sintaxis del lenguaje.
** El zen de python
   
   Es una manera de programar en donde el objetivo es que tu programa haga
   lo que debe de hacer y que sea claro en el sentido en el que sea facil de
   entender esto quiza también ahorre mucho tiempo en la documentacion 
   y asi nuestro programa sera mas facil de leer por lo que sera mas facil 
   aumentarlo o darle mantenimiento.

   Una forma de llegar a este objetivo es seguir el zen de python que se puede
   consultar desde el interprete de python ejecutando la siguiente instruccion:

   #+BEGIN_SRC bash
   >>> import this
   #+END_SRC

   Nos arrojara el siguiente texto:

   #+BEGIN_SRC bash
   The Zen of Python, by Tim Peters

   Beautiful is better than ugly.
   Explicit is better than implicit.
   Simple is better than complex.
   Complex is better than complicated.
   Flat is better than nested.
   Sparse is better than dense.
   Readability counts.
   Special cases aren't special enough to break the rules.
   Although practicality beats purity.
   Errors should never pass silently.
   Unless explicitly silenced.
   In the face of ambiguity, refuse the temptation to guess.
   There should be one-- and preferably only one --obvious way to do it.
   Although that way may not be obvious at first unless you're Dutch.
   Now is better than never.
   Although never is often better than *right* now.
   If the implementation is hard to explain, it's a bad idea.
   If the implementation is easy to explain, it may be a good idea.
   Namespaces are one honking great idea -- let's do more of those!
   >>> 

   En donde podemos apreciar una lista de reglas que se tienen que tener en 
   consideracion cada vez que estemos trabjando en python.
   #+END_SRC
* Sintaxis de python
  La sintaxis de python es famosa por ser clara a diferencia de otros
  lenguajes ademas de que se pueden omitir los tipos de datos
  primitivos y otros a la hora de declarar vaiables o funciones. El 
  detalle con python esta en que las secciones de codigo que 
  pertenecen a funciones o estructuras de control se identificaran por
  una indentacion de 4 espacios. Veremos a detalle este concepto en los
  primero ejercicios.
** Tipos primitivos
   Pese a que se puede ejecutar codigo sin la necesidad de especificar
   los tipos de datos con los que se trabaja, ya que python infiere el
   tipo de dato y para consultar el tipo de dato con el que se trabaja
   python tiene una funcion que determina el tipo : type() 
   entre los parentensis ira la variable u objeto del que queremos
   saber tipo, ejemplo:
  
   #+BEGIN_SRC python
   misterio = "mistery"
   type(misterio)
   #+END_SRC

   ejecutado en el interprete de python tiene el siguiente aspecto:

   #+BEGIN_SRC shell
   >>> misterio = "mistery"
   >>> type(misterio)
   <type 'str'>
   >>>
   #+END_SRC

   Con esto se demuestra que python infiere los tipos con los que se
   trabaja aunque no aparezcan explicitamente ya que en su motor los 
   determina, esto nos da ventaja de escribir mas rapido nuestros 
   programas pero, hagamos un breve repaso de los tipos primitivos que
   python maneja de manera nativa.

   | Tipos de datos primitivos | Representacion en PYTHON |
   |---------------------------+--------------------------|
   | enteros                   | int                      |
   | enteros largos            | long                     |
   | punto flotante            | float                    |
   | complejos                 | j                        |
   | cadenas                   | str                      |
   | boolean                   | True , False             |
     
** Operadores aritmeticos y de relacion
   Los operadores aritmeticos son importantes en cualquier lenguaje de
   programacion junto con los de relacion que siempre devolveran una 
   respuesta del tipo boolean.
   
   | Operadores | Descripcion     | Ejemplos de uso |
   |------------+-----------------+-----------------|
   | +          | suma            | r = 3+5         |
   | -          | resta           | r = 3+5         |
   | *          | multiplicaion   | r = 3*6         |
   | **         | exponente       | r = 2**2        |
   | /          | division        | r = 2/2         |
   | //         | divisionentera  | r = 3 // 2      |
   | %          | modulo          | r = 2%2         |
   |------------+-----------------+-----------------|
   | ==         | igualdad        | 5 == 5          |
   | !=         | diferencia      | 5 != 5          |
   | <          | menor que       | 5 < 5           |
   | >          | mayor que       | 5 > 5           |
   | <=         | menor igual que | 5 <= 5          |
   | >=         | mayor igual que | 5 >= 5          |

** Estructuras de control
   Las estructuras de control nos ayudan a no repetir lo que ya hemos
   escrito o dicho de otra manera nos ayuda a automatizar tareas que
   ya hemos programado asi como a definir los casos en que esto se 
   realizara. Aqui ahondaremos en el concepto de indentacion
*** Sentencias if
    Se utiliza para validar si un bloque de codigo se ejecutara o no
    la sintaxis es la siguiente:

    #+BEGIN_SRC pytho
    if expresion:
        exp
    #+END_SRC
    
    Notemos que "exp" esta a 4 espacios en blanco y esto dice 
    o se lee como todo lo que este declarado abajo del if a 4 espacios
    sera el bloque de codigo que ejecutara el if si la "expresion" 
    resulta ser True. 
    En lenguajes como Java o C los bloques de codigo se identifican 
    por ir entre llaves:
    Ejemplo en Java

    #+BEGIN_SRC java
    if(expresion){
    exp
    }
    #+END_SRC
*** Sentencias else y elif
    Siempre van despues de de la sentencia if y se ocupan para hacer 
    algo con los casos que no se aceptan en la sentencia if, ejemplo:

    #+BEGIN_SRC python
    if expresion:
        exp1
    elif expresion:
        exp2
    else:
        exp3
    #+END_SRC

    se pueden anidar las sentencias if asi como las sentencias elif
    sin embargo no es lo mismo con las sentencias else ya que 
    representa cualquier otro caso.
*** Bucles while
    A diferencia de las sentencias if, elif y else la sentencias while
    repite las instrucciones indentadas mientras se mantenga la 
    condicion como cierta, una vez que la evalue a False saldra del 
    bucle, ejemplo:
    #+BEGIN_SRC python
    i = 0
    while(i < 10):
        print(i)
        i = i + 1
    #+END_SRC
    
    ¿Que imprime el siguiente codigo
    #+BEGIN_SRC python
    while 10 == 10:
        print(".i.")
    #+END_SRC
*** Sentencia break    
    Para finalizar un bucle while prematuramente, se puede usar la 
    sentencia break para interrumpir el bucle dado el caso. Siendo asi
    ¿Que imprime el siguiente codigo?

    #+BEGIN_SRC python
    i = 0
    while 10 == 10:
        print(i)
        i = i + 1
        if i == 11:
            break
    #+END_SRC
        
    #+BEGIN_SRC shell
    >>> i = 0
    >>> while(True):
    ...     print(".i.")
    ...     i = i + 1
    ...     if i == 11:
    ...         break
    ... 
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    .i.
    >>> 
    #+END_SRC
*** Bucles for        
    Los bucles for funcionan unicamente con objetos iterables.
    Yo intente iterar sobre un entero (tipo int) y me arrojo el
    siguiente mensaje:
    
    #+BEGIN_SRC shell
    >>> for i in 10:
    ...     print i 
    ... 
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: 'int' object is not iterable
    #+END_SRC
    
    Ahora bien python cuenta con una funcion muy util llamada range()
    la cual recibe 1 o 2 parametros enteros y devuelve una lista; si 
    solo recibe un parametro la lista comenzara con el 0 y terminara
    en un numero antes del parametro, ejemplo:
    #+BEGIN_SRC shell
    >>> for i in range(10):
    ...     print i 
    ... 
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    >>> 
    #+END_SRC

    con dos parametros se veria como sigue:

    #+BEGIN_SRC shell
    >>> for i in range(2,10):
    ...     print i 
    ... 
    2
    3
    4
    5
    6
    7
    8
    9
    >>> 
    #+END_SRC
    
    Para conocer que mas cosas puede hacer por nosotros la funcion
    range python cuenta con una funcion muy util que utilizaremos 
    constantemente llamada help() y entre los parentesis ira la 
    funcion sobre la que deseamos saber mas que en nuestro caso es 
    range()... en la terminal se ve como sigue:

    #+BEGIN_SRC shell
    >>> help(range)
    Help on built-in function range in module __builtin__:

    range(...)
    range(stop) -> list of integers
    range(start, stop[, step]) -> list of integers
    
    Return a list containing an arithmetic progression of integers.
    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
    When step is given, it specifies the increment (or decrement).
    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
    These are exactly the valid indices for a list of 4 elements.

>>> 
    #+END_SRC
    
    ¿Puedes dar un ejemplo de la tercera opcion de range que tiene 3 
    parametros?...
** Funciones y modulos 

   La sintaxis para funciones en python es: 

   #+BEGIN_SRC python
   def mi_funcion():
   #+END_SRC

   en donde "mi_funcion" sera el nombre que elijamos para nuestra 
   funcion y entre parentesis iran los parametros que necesitemos.
   Como detalle a considerar es que apartir de 
** Estructuras de datos
   Las estructuras de datos son una herramienta muy util que nos
   brindan los lenguajes de programación para modelar. Python nos 
   ofrece las siguietes para trabajar

   | Estructura   | Representacion en python |
   |--------------+--------------------------|
   | Conjuntos    | set = {}                 |
   | Listas       | l = []                   |
   | Tuplas       | t = algo, otro, algo     |
   | Diccionarios | d = {:}                  |

* El interprete de python
  El interprete de python es el encargado de ejecutar las 
  instrucciones o los programas que les pasemos ya sea escribiendolos 
  directamente en el interprete o cargandolos desde un archivo que
  tendra la extension .py 
** Cómo ejecutar un programa de python
*** Cómo ejecutar un programa de python
*** Cómo ejecutar un programa desde el interprete
   
* Primeros ejercicios
  1) Escribir un programa el cual encuentre todos los numeros 
     divisibles entre 7 pero, que no son divisibles entre 5
     entre 2000 y 3200.
     #+BEGIN_SRC python
     for i in range(2000,3200):
         if (i%5!=0) and (i%7==0):
             print i
     #+END_SRC 
  2) 

      
